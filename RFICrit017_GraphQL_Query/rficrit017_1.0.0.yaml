swagger: '2.0'
info:
  title: RFICrit017
  x-ibm-name: rficrit017
  version: 1.0.0
schemes:
  - https
  - wss
basePath: /rficrit017
x-ibm-configuration:
  graphql-schema: '#/definitions/spacex-production.up.railway.app'
  type: graphql
  cors:
    enabled: true
  assembly:
    execute:
      - switch:
          version: 2.0.0
          title: switch
          description: ''
          case:
            - condition: >-
                (($operationPath() = '/graphql') and ($httpVerb() = 'GET') and
                (request.websocket = true))
              execute:
                - ratelimit:
                    version: 2.4.0
                    title: ratelimit websocket
                    description: GraphQL Websocket limit
                    count-limit:
                      - name: graphql-subscription-websocket
                        operation: inc
                    source: plan-named
                - switch:
                    version: 2.0.0
                    title: switch
                    case:
                      - condition: ($exists($urlParameter('query')))
                        execute:
                          - parse:
                              version: 2.0.0
                              title: parse
                              parse-settings-reference:
                                parse-settings:
                                  document_type: graphql
                                  max_nesting_depth: 10
                              description: Parse the GraphQL query
                          - validate:
                              version: 2.7.0
                              title: validate & analyze
                              input: message
                              validate-against: graphql
                              description: >-
                                Validate the GraphQL query and analyze the
                                expected cost
                          - ratelimit:
                              version: 2.4.0
                              title: ratelimit concurrent
                              description: GraphQL Subscription limit
                              source: plan-named
                              count-limit:
                                - name: graphql-subscription-type-cost
                                  operation: inc
                                - name: graphql-subscription-field-cost
                                  operation: inc
                      - otherwise: []
                - websocket-upgrade:
                    version: 2.0.0
                    title: websocket-upgrade
                    header-control:
                      type: blocklist
                      values: []
                    parameter-control:
                      type: allowlist
                      values: []
                    timeout: 60
                    description: >-
                      establish the websocket connection to the backend GraphQL
                      server
                    target-url: https://spacex-production.up.railway.app/
                    request-assembly:
                      execute:
                        - parse:
                            version: 2.0.0
                            title: parse
                            parse-settings-reference:
                              parse-settings:
                                document_type: detect
                                max_nesting_depth: 10
                            description: Parse the GraphQL query
                        - switch:
                            version: 2.0.0
                            title: switch
                            description: ''
                            case:
                              - condition: >-
                                  ($storageType() = "json" and
                                  $exists(message.body.payload) and
                                  message.body.payload != null and
                                  $string(message.body.payload) != '{}')
                                execute:
                                  - set-variable:
                                      version: 2.0.0
                                      title: backup payload
                                      actions:
                                        - set: websocket-backup
                                          value: $(message.body)
                                          type: any
                                        - set: message.body
                                          value: $(message.body.payload)
                                          type: any
                                      description: Backup of websocket request
                                  - parse:
                                      version: 2.0.0
                                      title: parse
                                      parse-settings-reference:
                                        parse-settings:
                                          document_type: graphql
                                          max_nesting_depth: 10
                                      description: Parse the GraphQL query
                                  - validate:
                                      version: 2.7.0
                                      title: validate & analyze
                                      input: message
                                      validate-against: graphql
                                      description: >-
                                        Validate the GraphQL query and analyze
                                        the expected cost
                                  - set-variable:
                                      version: 2.0.0
                                      title: restore backup
                                      actions:
                                        - set: message.body
                                          value: $(websocket-backup)
                                          type: any
                                      description: Restore backup of websocket request
                              - condition: $storageType() != "json"
                                execute:
                                  - validate:
                                      version: 2.7.0
                                      title: validate & analyze
                                      input: message
                                      validate-against: graphql
                                      description: >-
                                        Validate the GraphQL query and analyze
                                        the expected cost
                              - condition: >-
                                  ((message.body.type = 'connection_init') or
                                  (message.body.type = 'stop') or
                                  (message.body.type = 'connection_terminate'))
                                execute: []
                              - otherwise:
                                  - throw:
                                      version: 2.0.0
                                      title: throw
                                      name: BadRequestError
                                      description: >-
                                        Reject all inputs not handled by other
                                        branches of the switch
                                      message: Bad Request
                        - switch:
                            version: 2.0.0
                            title: switch
                            case:
                              - condition: >-
                                  (message.attributes.graphql.query.operationType
                                  = 'subscription')
                                execute:
                                  - ratelimit:
                                      version: 2.4.0
                                      title: ratelimit concurrent
                                      description: GraphQL Subscription limit
                                      count-limit:
                                        - name: graphql-subscription-type-cost
                                          operation: inc
                                        - name: graphql-subscription-field-cost
                                          operation: inc
                                      source: plan-named
                              - condition: >-
                                  ($exists(message.attributes.graphql.query.operationType))
                                execute:
                                  - ratelimit:
                                      version: 2.4.0
                                      title: ratelimit expected
                                      description: >-
                                        Consume expected cost of query from rate
                                        limits
                                      rate-limit:
                                        - name: graphql-type-cost
                                          operation: consume
                                        - name: graphql-field-cost
                                          operation: consume
                                      burst-limit: []
                                      source: plan-named
                              - otherwise: []
                    response-assembly:
                      execute:
                        - parse:
                            version: 2.0.0
                            title: parse
                            parse-settings-reference:
                              default: apic-default-parsesettings
                            description: Parse the response from the GraphQL backend server
                        - switch:
                            version: 2.0.0
                            title: switch
                            description: ''
                            case:
                              - condition: >-
                                  ($exists(message.body.payload) and
                                  message.body.payload != null and
                                  $string(message.body.payload) != '{}')
                                execute:
                                  - set-variable:
                                      version: 2.0.0
                                      title: backup payload
                                      actions:
                                        - set: websocket-backup
                                          value: $(message.body)
                                          type: any
                                        - set: message.body
                                          value: $(message.body.payload)
                                          type: any
                                      description: Backup of websocket request
                                  - parse:
                                      version: 2.0.0
                                      title: parse
                                      parse-settings-reference:
                                        default: apic-default-parsesettings
                                      description: >-
                                        Parse the response from the GraphQL
                                        backend server
                                  - validate:
                                      version: 2.7.0
                                      title: validate & analyze
                                      input: message
                                      validate-against: graphql
                                      description: >-
                                        Validate the returned JSON and analyze
                                        the real cost
                                  - set-variable:
                                      version: 2.0.0
                                      title: restore backup
                                      actions:
                                        - set: message.body
                                          value: $(websocket-backup)
                                          type: any
                                      description: Restore backup of websocket request
                              - condition: ($exists(message.body.data))
                                execute:
                                  - validate:
                                      version: 2.7.0
                                      title: validate & analyze
                                      input: message
                                      validate-against: graphql
                                      description: >-
                                        Validate the returned JSON and analyze
                                        the real cost
                              - otherwise: []
                        - switch:
                            version: 2.0.0
                            title: switch
                            case:
                              - condition: >-
                                  ($exists(message.attributes.graphql.query.operationType)
                                  and
                                  message.attributes.graphql.query.operationType
                                  != 'subscription')
                                execute:
                                  - ratelimit:
                                      version: 2.4.0
                                      title: ratelimit actual
                                      description: >-
                                        Replenish over-estimated cost
                                        (determined from response) to rate
                                        limits
                                      rate-limit:
                                        - name: graphql-type-cost
                                          operation: replenish
                                        - name: graphql-field-cost
                                          operation: replenish
                                      burst-limit: []
                                      source: plan-named
                              - otherwise: []
            - otherwise:
                - parse:
                    version: 2.0.0
                    title: parse
                    parse-settings-reference:
                      parse-settings:
                        document_type: graphql
                        max_nesting_depth: 10
                    description: Parse the GraphQL query
                - switch:
                    version: 2.0.0
                    title: switch
                    case:
                      - condition: >-
                          ($operationPath() = '/graphql' and
                          message.attributes.graphql.query.operationType !=
                          'subscription')
                        execute:
                          - graphql-execute:
                              title: GraphQL execute
                              version: 2.0.0
                              targets:
                                - target: root
                                  execute:
                                    - validate:
                                        input: message
                                        version: 2.7.0
                                        validate-against: graphql
                                        description: >-
                                          Validate the GraphQL query and analyze
                                          the expected cost
                                        title: validate & analyze
                                    - ratelimit:
                                        version: 2.4.0
                                        title: ratelimit expected
                                        description: >-
                                          Consume expected cost of query from rate
                                          limits
                                        rate-limit:
                                          - name: graphql-type-cost
                                            operation: consume
                                          - name: graphql-field-cost
                                            operation: consume
                                        burst-limit: []
                                        source: plan-named
                                    - invoke:
                                        cache-ttl: 900
                                        graphql-send-type: detect
                                        parameter-control:
                                          type: allowlist
                                          values: []
                                        http-version: HTTP/1.1
                                        header-control:
                                          type: allowlist
                                          values:
                                            - User-Agent
                                            - X-Client-IP
                                            - X-Global-Transaction-ID
                                            - Content-Type
                                        chunked-uploads: true
                                        verb: keep
                                        stop-on-error:
                                          - ConnectionError
                                          - SOAPError
                                          - OperationError
                                        websocket-upgrade: false
                                        description: Invoke the backend GraphQL server
                                        compression: false
                                        title: graphql-invoke
                                        target-url: >-
                                          https://spacex-production.up.railway.app/
                                        backend-type: graphql
                                        version: 2.3.0
                                        cache-response: protocol
                                        timeout: 60
                                    - parse:
                                        title: parse
                                        version: 2.0.0
                                        description: >-
                                          Parse the response from the GraphQL
                                          backend server
                                        parse-settings-reference:
                                          default: apic-default-parsesettings
                                    - validate:
                                        input: message
                                        version: 2.7.0
                                        validate-against: graphql
                                        description: >-
                                          Validate the returned JSON and analyze
                                          the real cost
                                        title: validate & analyze
                                    - ratelimit:
                                        version: 2.4.0
                                        title: ratelimit actual
                                        description: >-
                                          Replenish over-estimated cost
                                          (determined from response) to rate
                                          limits
                                        rate-limit:
                                          - name: graphql-type-cost
                                            operation: replenish
                                          - name: graphql-field-cost
                                            operation: replenish
                                        burst-limit: []
                                        source: plan-named
                                  catch:
                                    - execute: []
                                      errors:
                                        - ConnectionError
                                - target: __introspection
                                  execute:
                                    - ratelimit:
                                        source: plan-named
                                        version: 2.4.0
                                        description: >-
                                          Apply design-time rate limit for
                                          introspection query
                                        title: ratelimit design-time
                                        burst-limit: []
                                        rate-limit:
                                          - operation: consume
                                            name: graphql-design-request
                                    - validate:
                                        input: message
                                        version: 2.7.0
                                        validate-against: graphql
                                        description: >-
                                          Validate the GraphQL query and analyze
                                          the expected cost
                                        title: validate & analyze
                                    - graphql-introspect:
                                        input: message
                                        version: 2.0.0
                                        description: >-
                                          Introspect the GraphQL schema using the
                                          query
                                        title: graphql-introspect
                      - condition: ($operationPath() = '/graphql/cost')
                        execute:
                          - ratelimit:
                              version: 2.4.0
                              title: ratelimit design-time
                              description: Apply design-time rate limit for cost analysis
                              rate-limit:
                                - name: graphql-design-request
                                  operation: consume
                              burst-limit: []
                              source: plan-named
                          - validate:
                              version: 2.7.0
                              title: validate & analyze
                              input: message
                              validate-against: graphql
                              description: >-
                                Validate the GraphQL query and analyze the
                                expected cost
                          - set-variable:
                              version: 2.0.0
                              title: set-variable
                              actions:
                                - set: message.body
                                  value: $(message.attributes.graphql)
                                  type: any
                              description: >-
                                Copy the cost estimate for the GraphQL query to
                                the output
                      - otherwise:
                          - throw:
                              version: 2.0.0
                              title: throw
                              name: BadRequestError
                              description: >-
                                Reject all inputs not handled by other branches
                                of the switch
                              message: Bad Request
                    description: >-
                      Choose between executing on backend server or other
                      options to be completed on the Gateway
    finally: []
  html-page: store:///graphiql.html
  gateway: datapower-api-gateway
  phase: realized
  enforced: true
  testable: true
  activity-log:
    enabled: true
    success-content: activity
    error-content: payload
definitions:
  spacex-production.up.railway.app:
    type: 'null'
    x-ibm-schema:
      type: graphql
      url: https://spacex-production.up.railway.app/
      file: >-
        
paths:
  /graphql:
    post:
      responses:
        '200':
          description: success
          schema:
            type: string
      consumes:
        - application/json
        - application/graphql
      produces:
        - application/json
      parameters:
        - name: variables
          in: query
          required: false
          type: string
        - name: operationName
          in: query
          required: false
          type: string
        - name: body
          in: body
          required: true
          schema:
            type: string
    get:
      responses:
        '200':
          description: success
          schema:
            type: string
      consumes: []
      produces:
        - application/json
        - text/html
      parameters:
        - name: variables
          in: query
          required: false
          type: string
        - name: operationName
          in: query
          required: false
          type: string
        - name: query
          in: query
          required: false
          type: string
    parameters: []
  /graphql/cost:
    post:
      responses:
        '200':
          description: success
          schema:
            type: string
      consumes:
        - application/json
        - application/graphql
      produces:
        - application/json
      parameters:
        - name: variables
          in: query
          required: false
          type: string
        - name: operationName
          in: query
          required: false
          type: string
        - name: body
          in: body
          required: true
          schema:
            type: string
    get:
      responses:
        '200':
          description: success
          schema:
            type: string
      consumes: []
      produces:
        - application/json
        - text/html
      parameters:
        - name: variables
          in: query
          required: false
          type: string
        - name: operationName
          in: query
          required: false
          type: string
        - name: query
          in: query
          required: true
          type: string
    parameters: []
securityDefinitions:
  clientID:
    type: apiKey
    in: header
    name: X-IBM-Client-Id
security:
  - clientID: []
